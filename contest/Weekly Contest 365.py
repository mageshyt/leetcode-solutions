"""You are given a 0-indexed integer array nums.

Return the maximum value over all triplets of indices (i, j, k) such that i < j < k. If all such triplets have a negative value, return 0.

The value of a triplet of indices (i, j, k) is equal to (nums[i] - nums[j]) * nums[k].


Example 1:

Input: nums = [12,6,1,2,7]
Output: 77
Explanation: The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.
It can be shown that there are no ordered triplets of indices with a value greater than 77. 


"""


from typing import List
class Solution:
        def maximumTripletValue(self, nums: List[int]) -> int:
                max_val = 0

                n = len(nums)

                if(n < 3):
                        return 0
                
                if (n==3):
                       max_val=(nums[0] - nums[1]) * nums[2]


                for i in range(0,n):
                        for j in range(i+1,n):
                                for k in range(j+1,n):
                                        max_val = max(max_val,(nums[i] - nums[j]) * nums[k])


                
                return max_val if max_val > 0 else 0

        def maximumTripletValue2(self, nums: List[int]) -> int:
                
                res=0
                max_a=0
                max_b=0
                for num in nums:
                        res= max(res, num*max_b)
                        max_b=max(max_b,max_a-num)
                        max_a=max(max_a,num)

                return res
        


if __name__ == "__main__":
        nums = [12,6,1,2,7]
        # print(Solution().maximumTripletValue2(nums))



"""You are given a 0-indexed array nums and an integer target.

A 0-indexed array infinite_nums is generated by infinitely appending the elements of nums to itself.

Return the length of the shortest subarray of the array infinite_nums with a sum equal to target. If there is no such subarray return -1.S

Example 1:

Input: nums = [1,2,3], target = 5
Output: 2
Explanation: In this example infinite_nums = [1,2,3,1,2,3,1,2,...].
The subarray in the range [1,2], has the sum equal to target = 5 and length = 2.
It can be proven that 2 is the shortest length of a subarray with sum equal to target = 5.
"""

class Solution:
    def minSizeSubarray(self, nums: List[int], target: int) -> int:
        window_sum = 0

        left = 0

        min_length = float('inf')


        for right in range(len(nums)):

                window_sum += nums[right]

                while window_sum >= target:
                        min_length = min(min_length, right - left + 1)
                        window_sum -= nums[left]
                        left += 1

        return min_length if min_length != float('inf') else 0
    

    

            


            

    

if __name__ == "__main__":
        nums =[1,1,1,2,3]
        target = 4
        print(Solution().minSizeSubarray(nums,target))

